Problem statement
You're given a string 'S' consisting of "{", "}", "(", ")", "[" and "]" .



Return true if the given string 'S' is balanced, else return false.


CODE:
  def isValidParenthesis(s: str) -> bool:
    # Stack to keep track of opening brackets
    stack = []
    # Dictionary to map closing brackets to their corresponding opening brackets
    mapping = {')': '(', '}': '{', ']': '['}
    
    # Iterate through each character in the string
    for char in s:
        # If it's a closing bracket
        if char in mapping:
            # Pop the top element from the stack if it's not empty, else assign a dummy value
            top_element = stack.pop() if stack else '#'
            # Check if the popped element matches the corresponding opening bracket
            if mapping[char] != top_element:
                return False
        else:
            # If it's an opening bracket, push it onto the stack
            stack.append(char)
    
    # If the stack is empty, all brackets were matched; otherwise, not balanced
    return not stack

# Example usage
if __name__ == "__main__":
    # Test cases
    print("Balanced" if isValidParenthesis("[()]{}{[()()]()}") else "Not Balanced")  # Output: Balanced
    print("Balanced" if isValidParenthesis("[[}[") else "Not Balanced")            # Output: Not Balanced
